<!DOCTYPE html>
<html lang="en">
<%- include('partials/scripts.ejs') %>

  <body>
    <%- include('partials/homeHeader.ejs') %>
      <script src="/js/socketio.js"></script>
      <style>
        #chat-form {
          display: none;
        }

        #messages {
          list-style: none;
          width: 100%;
        }

        #messages li {
          margin-bottom: 10px;
        }

        li.friend {
          background-color: aqua;
          border-radius: 10px;
          padding: 10px;
          margin-right: 100px;
        }

        li.self {
          background-color: coral;
          border-radius: 10px;
          padding: 10px;
          margin-left: 100px;
        }
      </style>
      <div class="container">
        <div class="row">
          <div class="col">
            <div class="col">
              <p id="currentUser"></p>
              <h7>Users Online:</h7>
              <ul id="users"></ul>
            </div>
            <form id="login-form">
              <p>
                <input id="username" name="username" />
                <button>Login</button>
              </p>
            </form>
          </div>
          <div class="col">
            <ul id="messages"></ul>
          </div>
          <form id="chat-form">
            <p id="typing"></p>
            <p>
              <input id="chat-message" name="chat-message" />
              <button>Send</button>
            </p>
          </form>
        </div>
      </div>
      <script>
        const socket = io();

        let typingTimer = null;
        let userTypingNow = {};

        const chatForm = document.getElementById("chat-form");
        const input = document.getElementById("chat-message");
        const messages = document.getElementById("messages");

        const loginForm = document.getElementById("login-form");
        const username = document.getElementById("username");
        const currentUser = document.getElementById("currentUser");

        const usersList = document.getElementById("users");
        const typing = document.getElementById("typing");

        function addMessageToList(msg, isSelf) {
          const chatMessage = document.createElement("li");
          const { message, user } = msg;
          chatMessage.innerText = `${user}: ${message}`;
          chatMessage.classList.add(isSelf ? "self" : "friend")
          messages.appendChild(chatMessage);
        }

        function showWhoIsTyping() {
          const names = Object.keys(userTypingNow);
          if (names.length > 0) {
            typing.innerText = `${names.join(", ")} Typing...`;
          } else {
            typing.innerText = "";
          }

        }

        loginForm.addEventListener("submit", (e) => {
          e.preventDefault();
          if (username.value !== "") {
            socket.emit("login", username.value);
            loginForm.style.display = "none";
            chatForm.style.display = "block";
            currentUser.innerText = `Currently logged in as: ${username.value}`;
            username.value = "";
          }
        })

        chatForm.addEventListener("submit", (e) => {
          e.preventDefault();
          if (input.value !== "") {
            socket.emit("chat-message", input.value);
            addMessageToList({ message: input.value, user: "me" }, true)
            input.value = "";
          }
        });

        input.addEventListener("keyup", () => {
          clearTimeout(typingTimer);
          socket.emit("typing", "true");
          typingTimer = setTimeout(() => {
            socket.emit("typing", "false");
          }, 1000)
        })

        socket.on("message", (message) => {
          addMessageToList(message, false)
        })

        socket.on("newuser", (name) => {
          const newuser = document.createElement("li");
          newuser.innerText = name;
          usersList.appendChild(newuser);
        });

        socket.on("typingnow", (state) => {
          const { typing, username } = state;
          if (typing === "true") {
            userTypingNow[username] = typing;
          } else {
            delete userTypingNow[username];
          }
          showWhoIsTyping();
        })
      </script>
  </body>

</html>